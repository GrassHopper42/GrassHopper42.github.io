{"componentChunkName":"component---src-templates-post-jsx","path":"/tmux-init/","result":{"data":{"site":{"siteMetadata":{"title":"베짱이.dev"}},"markdownRemark":{"id":"19c883bf-49e6-54a9-a7d6-a4413c774981","excerpt":"개발을 처음 배울때부터 WSL을 세팅해서 사용했지만 VSC를 주로 사용하다보니 기본적인 세팅만 해두고 썼지만 이번에 백엔드를 Spring boot로 전환하면서 Vim을 적극적으로 이용해보기로 했다.\nVim을 이용하려고 세팅을 좀 만지다보니 또 세팅병이 도져서 터미널을 갈아엎었다고 볼 수 있을만큼 손을 많이 댔는데 이 과정에서 하루~이틀정도 삽질을 했던것같…","html":"<p>개발을 처음 배울때부터 WSL을 세팅해서 사용했지만 VSC를 주로 사용하다보니 기본적인 세팅만 해두고 썼지만 이번에 백엔드를 Spring boot로 전환하면서 Vim을 적극적으로 이용해보기로 했다.\nVim을 이용하려고 세팅을 좀 만지다보니 또 세팅병이 도져서 터미널을 갈아엎었다고 볼 수 있을만큼 손을 많이 댔는데 이 과정에서 하루~이틀정도 삽질을 했던것같다.\n여러가지 플러그인과 세팅들이 있지만 가장 먼저 Tmux세팅부터 남긴다.</p>\n<h2>Tmux?</h2>\n<p>Tmux는 <strong>Terminal multiplexer</strong>의 일종인데 터미널 화면을 분할해서 사용할 수 있다.\n세션에서 서버를 실행중이라면 종료하지 않고 최소화와 같은 기능으로도 사용할 수 있지만 나는 화면분할 위주로 사용하고 있다.</p>\n<h2>용어</h2>\n<p>본격적인 사용에 앞서 사용과 설정에서의 이해를 위해 Tmux의 실행단위들을 알아보자  </p>\n<h3>Pane</h3>\n<p><strong>Pane</strong>은 Tmux에서 가장 작은 실행단위로 Tmux에서 화면을 분할한다는 것은 이 Pane을 생성한다는 뜻이다.\n가로나 세로로 분할할 수 있고 특정 커맨드를 입력하면 Pane의 갯수에 맞춰 추천하는 화면 구성을 돌아가며 전환해준다.</p>\n<h3>Window</h3>\n<p>Pane이 한개 이상 모여 <strong>Window</strong>를 구성한다.\nWindow는 VSC나 브라우저의 탭으로 이해하면 되는데 동일한 화면에 나타나지는 않지만 실행중인 세션에서 옮겨가며 사용할 수 있다.</p>\n<h3>Session</h3>\n<p>Window가 하나 이상 모이면 <strong>Session</strong>이 구성된다.\n<strong>Session</strong>은 tmux에서 관리하는 가장 큰 실행단위로 tmux를 실행하면 가장 먼저 생성되는 요소이다.\nVSC에서의 창 하나로 이해하면 될 것 같다.\n<code class=\"language-text\">detach</code>로 작업을 유지한채 최소화 시키고 <code class=\"language-text\">attach</code>를 통해 다시 열 수 있다.</p>\n<h2>설치</h2>\n<p>Ubuntu를 기준으로 설치는 아주 쉽다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> tmux</code></pre></div>\n<p>설치가 다 됐으면 <code class=\"language-text\">tmux</code>를 입력해 실행할 수 있다.</p>\n<h2>설정</h2>\n<p>아래는 내가 사용하고 있는 .tmux.conf이다.\nroot디렉토리(Ubuntu라면 <code class=\"language-text\">~/</code>)에 <code class=\"language-text\">.tmux.conf</code>파일을 만들어주면 된다.</p>\n<details>\n<summary>.tmux.conf</summary>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\"># rmap prefix from &#39;C-b&#39; to &#39;C-a&#39;\nunbind C-b\nunbind C-Space\nset-option -g prefix C-a\nbind-key C-a send-prefix\n\n# split panes using | and -\nbind | split-window -h\nbind - split-window -v\nunbind &#39;&quot;&#39;\nunbind %\n\n# reload config file\nbind r source-file ~/.tmux.conf\\; display-message &quot;Config reloaded.&quot;\n\n# switch panes using Alt-arrow without prefix\nbind -n M-Left select-pane -L\nbind -n M-Right select-pane -R\nbind -n M-Up select-pane -U\nbind -n M-Down select-pane -D\n\n# vim setting\nis_vim=&quot;ps-o state= -o comm= -t &#39;#{pane_tty}&#39; \\\n    | grep -iqE &#39;^[^TXZ ]+ +(\\\\S+\\\\/)?g?(view|n?vim?x?)(diff)?$&#39;&quot;\n\nbind-key -n C-h  if-shell  &quot;$is_vim&quot;  &quot;send-keys C-h&quot;  &quot;select-pane -L&quot;\nbind-key -n C-j   if-shell  &quot;$is_vim&quot;  &quot;send-keys C-j&quot;   &quot;select-pane -D&quot;\nbind-key -n C-k  if-shell  &quot;$is_vim&quot;  &quot;send-keys C-k&quot;  &quot;select-pane -U&quot;\nbind-key -n C-l   if-shell  &quot;$is_vim&quot;  &quot;send-keys C-l&quot;   &quot;select-pane -R&quot;\nbind-key -n C-\\   if-shell  &quot;$is_vim&quot;  &quot;send-keys C-\\\\&quot;  &quot;select-pane -l&quot; \n\n# Enable mouse control (clickable windows, panes, resizable panes)\nset -g mouse on\n\n# don&#39;t rename windows automatically\nset-option -g allow-rename off\n\n# tmux\nset-option -sg escape-time 10\nset-option -g default-terminal &#39;tmux-256color&#39;\nset-option -ga terminal-overrides &#39;,*256col*:Tc&#39;\nset-option -g focus-events on\n\n######################################\n###########Design change##############\n######################################\n\n## loud or quiet?\nset-option -g visual-activity off\nset-option -g visual-bell off\nset-option -g visual-silence off\nset-window-option -g monitor-activity on\nset-option -g bell-action none\n\n# modes\nsetw -g clock-mode-colour colour5\nsetw -g mode-style bold\nsetw -g mode-style fg=colour1\nsetw -g mode-style bg=colour18\n\n# panes\nset -g pane-border-style bg=colour0\nset -g pane-border-style fg=colour255\nset -g pane-active-border-style bg=colour242\nset -g pane-active-border-style fg=colour83\n\n# statusbar\nset -g status-position bottom\nset -g status-justify left\nset -g status-bg colour18\nset -g status-fg colour137\nset -g window-status-style dim\nset -g status-left &quot;#{?client_prefix,Ω,ω}&quot;\nset -g status-right &quot;#{cpu_bg_color} CPU: #{cpu_icon} #{cpu_percentage} | #[fg=colour233,bg=colour19,bold] %d/%m #[fg=colour233,bg=colour8,bold] %H:%M:%S &quot;\nset -g status-right-length 120\nset -g status-left-length 20\n\nsetw -g window-status-current-style fg=colour1\nsetw -g window-status-current-style bg=colour18\nsetw -g window-status-current-style bold\nsetw -g window-status-current-format &#39; #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour248]#F &#39;\nsetw -g window-status-style fg=colour9\nsetw -g window-status-style bg=colour18\nsetw -g window-status-style none\nsetw -g window-status-format &#39; #I#[fgcolour237]:#[fg=colour250]#W#[fg=colour244]#F &#39;e\n\n# List of plugins\nset -g @plugin &#39;tmux-plugins/tpm&#39;\nset -g @plugin &#39;tmux-plugins/tmux-sensible&#39;\nset -g @plugin &#39;tmux-plugins/tmux-cpu&#39;\nset -g @plugin &#39;egel/tmux-gruvbox&#39;\n\nset -g @tmux-gruvbox &#39;dark&#39;\n\n# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\nrun &#39;~/.tmux/plugins/tpm/tpm&#39;</code></pre></div>\n</details>\n<p>100줄 가까이 되는 길이라 줄였다. 순서대로 살펴보자면, 가장 먼저 <code class=\"language-text\">prefix</code>키를 기본 설정돼있는 <code class=\"language-text\">Ctrl</code>+<code class=\"language-text\">b</code>에서 <code class=\"language-text\">Ctrl</code>+<code class=\"language-text\">a</code>로 바꿔줬다.\n기본 <code class=\"language-text\">Ctrl</code>키 위치에서도 <code class=\"language-text\">b</code>보다 <code class=\"language-text\">a</code>가 누르기 편하기도 하고 나는 <code class=\"language-text\">Capslock</code>버튼과 <code class=\"language-text\">Ctrl</code>버튼을 바꿔줬기 때문에 바로 옆에 붙어있어서 더 편했다.\n그리고 수평분할을 <code class=\"language-text\">prefix</code>+<code class=\"language-text\">|</code>, 수직분할을 <code class=\"language-text\">prefix</code>+<code class=\"language-text\">-</code>로 바꿔줬다.</p>\n<p>tmux는 <code class=\"language-text\">truecolor</code>를 지원하는데 이것 때문에 계속 오류가 떠서 애를 좀 먹었다.\n중간에 <em>tmux</em> 주석 처리 된 부분이 문제의 부분인데 여기저기 찾아보면서 만지작거리다가 이 설정으로 해결됐다.\n.zshrc에서 아래의 설정도 해 줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"zshrc\"><pre class=\"language-zshrc\"><code class=\"language-zshrc\">export TERM=tmux-256color</code></pre></div>\n<p>그 아래 디자인 부분은 tmux 상태바와 기타 다른부분들 디자인인데 잘 모르겠어서 다른 분의 configuration을 그대로 사용했다.\n상태바는 맨 아래 부분에서 볼 수 있듯 플러그인을 설치해서 사용중인데 플러그인별로 스타일을 설정하거나 고정돼있어서 딱히 필요없는 듯 하다.\ntmux 플러그인은 <a href=\"https://github.com/tmux-plugins/tpm\">깃허브</a>에서 플러그인 매니저를 설치한 후에 사용할 수 있다.</p>\n<p>처음 설정을 했다면 저장 후 tmux를 실행하던가 이미 실행중이라면 터미널에 아래 명령어를 입력해서 reload시켜주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tmux <span class=\"token builtin class-name\">source</span> ~/.tmux.conf</code></pre></div>\n<p>처음 <code class=\"language-text\">.tmux.conf</code>가 적용되고 나서 위 conf처럼 단축키를 지정해줬다면 <code class=\"language-text\">&lt;prefix></code>+<code class=\"language-text\">r</code>키를 이용해 간편하게 reloading할 수 있다.</p>\n<h2>참고자료</h2>\n<ul>\n<li><a href=\"https://hbase.tistory.com/200\">https://hbase.tistory.com/200</a></li>\n<li><a href=\"https://velog.io/@piopiop/Linux-tmux%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90\">https://velog.io/@piopiop/Linux-tmux%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90</a></li>\n<li><a href=\"https://velog.io/@ur-luella/tmux-%EC%82%AC%EC%9A%A9%EB%B2%95\">https://velog.io/@ur-luella/tmux-%EC%82%AC%EC%9A%A9%EB%B2%95</a></li>\n<li><a href=\"https://data-newbie.tistory.com/226\">https://data-newbie.tistory.com/226</a></li>\n<li><a href=\"https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/\">https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/</a></li>\n</ul>","frontmatter":{"title":"Tmux Setting","date":null,"update":"June 03, 2022","tags":["tmux","vim","WSL"],"series":null},"fields":{"slug":"/tmux-init/","readingTime":{"minutes":7.065}}},"seriesList":{"edges":[{"node":{"id":"1df815ad-a8af-5b8e-9873-8b8115df804e","fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World!"}}},{"node":{"id":"b61a6bf6-30d5-5468-bca6-8c4399512593","fields":{"slug":"/nestjs-prisma-dbhandling/"},"frontmatter":{"title":"[NestJS]NestJS에서 Prisma 사용하기"}}},{"node":{"id":"5e97337a-e3ed-5e87-b9f7-a96f25f34820","fields":{"slug":"/gatsby-analytics/"},"frontmatter":{"title":"[Gatsby]블로그에 Google Analytics 연결"}}},{"node":{"id":"19c883bf-49e6-54a9-a7d6-a4413c774981","fields":{"slug":"/tmux-init/"},"frontmatter":{"title":"Tmux Setting"}}}]},"previous":{"fields":{"slug":"/gatsby-analytics/"},"frontmatter":{"title":"[Gatsby]블로그에 Google Analytics 연결"}},"next":null},"pageContext":{"id":"19c883bf-49e6-54a9-a7d6-a4413c774981","series":null,"previousPostId":"5e97337a-e3ed-5e87-b9f7-a96f25f34820","nextPostId":null}},"staticQueryHashes":[]}