{"componentChunkName":"component---src-templates-post-jsx","path":"/nestjs-prisma-dbhandling/","result":{"data":{"site":{"siteMetadata":{"title":"베짱이.dev"}},"markdownRemark":{"id":"b61a6bf6-30d5-5468-bca6-8c4399512593","excerpt":"NestJS + Prisma 처음 백엔드를 구축할때 Apollo + GraphQL을 사용하기로 하면서 쓰기 시작한 Prisma를 NestJS + RestAPI로 migration하면서 NestJS와 많이 쓰는 TypeORM보다 익숙하고 편리해서 가져왔는데 막상 쓰려니 부족한 자료에 지금이라도 TypeORM으로 넘어가야하나 하는 고민을 수없이 했다.\n가장 …","html":"<h2>NestJS + Prisma</h2>\n<p>처음 백엔드를 구축할때 <strong>Apollo + GraphQL</strong>을 사용하기로 하면서 쓰기 시작한 <strong>Prisma</strong>를 <strong>NestJS + RestAPI</strong>로 migration하면서 <strong>NestJS</strong>와 많이 쓰는 <strong>TypeORM</strong>보다 익숙하고 편리해서 가져왔는데 막상 쓰려니 부족한 자료에 지금이라도 <strong>TypeORM</strong>으로 넘어가야하나 하는 고민을 수없이 했다.\n가장 큰 문제는 <strong>OOP</strong>환경에 대한 <strong>Prisma</strong>의 문서부족이었다.\n기본적인 세팅에 대한 부분은 <strong>Prisma</strong>와 <strong>NestJS</strong>공식문서에 잘 나와있었지만 조금만 깊어지면 문서가 영문으로조차 없어서 며칠동안 삽질을 했다.\n대체적으로 <strong>OOP</strong>와 <strong>테스트</strong>에 대한 내 이해부족때문이었다.\nNestJS시작부터 글을 적을 생각이었지만 기억이 날아갈까봐 우선 Prisma적용에 대한 글부터 남긴다.</p>\n<blockquote>\n<p>여러모로 부족해 설명에 오류나 누락이 있을 수 있습니다. 혹시나 이 글을 보신다면 많은 피드백 부탁드립니다.</p>\n</blockquote>\n<h3>1. NestJS에 PrismaClient 생성</h3>\n<ol>\n<li>\n<p>우선 <strong>NestJS</strong>와 <strong>Prisma</strong> 기본세팅이 돼있다는걸 가정하고 바로 <strong>PrismaClient</strong>생성으로 넘어간다. <code class=\"language-text\">nest-cli</code>를 이용해 <code class=\"language-text\">prisma</code>모듈과 서비스를 생성해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">nest g mo prisma <span class=\"token operator\">&amp;&amp;</span> nest g s prisma</code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">prisma.service.ts</code>에서 아래의 코드를 입력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ~/src/prisma/prisma.service.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> INestApplication<span class=\"token punctuation\">,</span> Injectable<span class=\"token punctuation\">,</span> OnModuleInit <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../prisma/generated\"</span> <span class=\"token comment\">//보통은 @prisma/client에서 불러오지만 yarn berry를 써서 따로 생성된 디렉토리에서 불러왔다.</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrismaService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PrismaClient</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnModuleInit</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">async</span> <span class=\"token function\">onModuleInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">async</span> <span class=\"token function\">enableShutdownHook</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> INestApplication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforeExit\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서부터 당황스러웠다. 지금까지 프리즈마 클라이언트를 생성하면 <code class=\"language-text\">const prisma = new PrismaClient()</code>같은 방법을 썼는데 서비스를 <code class=\"language-text\">PrismaClient</code>에서 <code class=\"language-text\">extends</code>하고 이걸 <code class=\"language-text\">onModuleInit</code>에 <code class=\"language-text\">implement</code>를 한다.<em><a href=\"https://www.howdy-mj.me/typescript/extends-and-implements/\">extends? implement?</a></em> <a href=\"https://docs.nestjs.com/recipes/prisma\">공식문서</a>에 이유가 상세히 잘 나와있지만 간단하게 설명하자면 <strong>Prisma</strong>를 <strong>DB</strong>에 빠르게 연결하기 위해 <code class=\"language-text\">onModuleInit</code>을 사용한다. 선택사항이지만 사용하지 않을경우 <strong>Prisma</strong>는 첫 호출이 있기 전까지 <strong>DB</strong>에 연결하지 않는다. <code class=\"language-text\">enableShutdownHooks</code>는 <a href=\"https://docs.nestjs.com/recipes/prisma#issues-with-enableshutdownhooks\">공식문서</a>와 <a href=\"https://progressivecoder.com/build-a-nestjs-prisma-rest-api/\">이 포스트</a>를 보면 <strong>Prisma</strong>와 <strong>NestJS</strong>가 종료메서드에 상호간섭하기 때문에 서비스에서 함수를 생성하고 <code class=\"language-text\">main.ts</code>에서 호출해서 종료를 강제해주는 것 같다.(이부분은 완벽하게 이해를 못했다.)</p>\n<details>\n  <summary>main.ts</summary>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ~/src/main.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/core\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.module\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./prisma/prisma.service\"</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">const</span> prisma<span class=\"token operator\">:</span> PrismaService <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>PrismaService<span class=\"token punctuation\">)</span>\n prisma<span class=\"token punctuation\">.</span><span class=\"token function\">enableShutdownHooks</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</details>\n</li>\n<li>\n<p><code class=\"language-text\">prisma.module.ts</code>에서 <code class=\"language-text\">Global</code>로 <code class=\"language-text\">export</code>해서 어느 모듈에서나 <code class=\"language-text\">provider</code>추가 없이 <code class=\"language-text\">injection</code>이 가능하도록 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ~/src/prisma/primsa.module.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Global<span class=\"token punctuation\">,</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./prisma.service\"</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Global</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>PrismaService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>PrismaService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrismaModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>이제 설정이 끝났고 다른 서비스에서 <code class=\"language-text\">constructor</code>에 <code class=\"language-text\">PrismaService</code>를 불러와 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ~/src/post/post.service.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nest/common\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Post <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"prisma/generated\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"src/prisma/prisma.service\"</span>\n<span class=\"token comment\">//...</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostService</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> prisma<span class=\"token operator\">:</span> PrismaService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// ...</span>\n\n <span class=\"token keyword\">async</span> <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Post <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prisma<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">findUnique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h3>2. 테스트?</h3>\n<p><strong>GraphQL</strong>을 버리고 처음 <strong>NextJS</strong>에서 기본 API routing으로 백엔드 기능을 구현했을때는 빠르게 최소한의 기능만 구축하기 위해서 테스트를 전혀 안하다가 <strong>NestJS</strong>로 넘어오면서 <strong>TDD</strong>를 해봐야겠다는 욕심(?)이 생겼다.\n테스트는 기본 설정돼있는 <strong>Jest</strong>로 하려했는데 nomadcoder에서 NestJS + Jest 기본 강의만 듣고 시작한 나에게 <strong>TDD</strong>는 너무 큰 산이었다.\n아직 간단한 CRUD밖에 없기때문에 테스트코드야 어떻게 짠다지만 <strong>DB</strong>와 <strong>ORM</strong>은 어떻게 해야하는지 전혀 감이 오지 않았다.\n당장에 <strong>Jest</strong>자체도 낯설었다.\n구글을 뒤져 <strong>NestJS</strong>와 <strong>Prisma</strong>를 사용해 테스트하는 예제 몇개를 구할 수 있었지만 대부분 <strong>Prisma</strong>를 <code class=\"language-text\">mocking</code>해서 테스트하는 방식이었다.\n하지만 <strong>Prisma</strong>자체가 제대로 돌아갈지도 미지수인 상황에서 <code class=\"language-text\">mocking</code>만 해봤자 무슨의미인가 싶고 <strong>TDD</strong>를 도입하는 만큼 수동테스트를 최대한 줄이고싶었다.\n문제는 현재 개발용 DB에 테스트용 더미데이터를 넣어뒀는데 계속 불필요한 테스트코드가 쌓이는것도 싫고, 만약 서비스를 배포한 후에도 같은 <strong>DB</strong>에 연결되면 심각한 문제를 초래하기 때문에 별도의 테스트용 DB에 연결할 필요가 있었다.\n지금까지는 다른 DB에 연결할 필요가 없었기 때문에 방법을 전혀 모르는 상태였다.\n여러모로 방법을 찾아봤는데 처음 생각한 방안은 <strong>PrismaClient</strong>를 <strong>서비스 DB</strong>와 <strong>Test DB</strong>에 각각 연결되도록 <code class=\"language-text\">generate</code>를 두번 하는 방법이었다.\n하지만 방법도 복잡하고 <strong>Prisma Engine</strong>이나 <code class=\"language-text\">generate</code>에 대한 이해가 부족해서 맞는 방법인지 확신이 없었다.</p>\n<h3>3. Prisma ↔ Test용 DB 연결</h3>\n<p>한참 공식문서를 뒤지다가 단서를 얻었다. <strong>PrismaClient</strong>를 생성할 때 <code class=\"language-text\">datasource</code>를 <code class=\"language-text\">overriding</code>하는 방법이었다.</p>\n<p>문제는 다시 <strong>OOP</strong>로 돌아온다. <strong>FP</strong>에서는</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> prisma <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrismaClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  datasource<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    db<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> DatabaseUrl <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>처럼 간단하게 <code class=\"language-text\">datasource overriding</code>을 할 수 있는데 <strong>NestJS</strong>같은 <strong>Class</strong>에서는 어떻게 해야할지 모르겠는데 자료도 없어 막막했다.\n나오지도 않는 구글을 한참 뒤지다가, <strong>Prisma</strong>랑 <strong>PrismaClient</strong>라이브러리 소스를 한참뒤지다가 겨우 단서를 찾았다.\n<code class=\"language-text\">constructor</code>에 <code class=\"language-text\">super</code>로 선언해주면 되는 간단한 문제였다.</p>\n<blockquote>\n<details>\n<summary>코드</summary>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ~/src/prisma/prisma.service.ts</span>\n\n<span class=\"token comment\">// import ...</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrismaService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PrismaClient</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">onModuleInit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      datasources<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        db<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          url<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TEST_DATABASE_URL</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// async onModuleInit...</span></code></pre></div>\n</details>\n</blockquote>\n<p>방법은 찾았는데 DB URL을 어떻게 입력할지를 놓고 또 한참 씨름했다.\n<code class=\"language-text\">.env</code>에 넣고 <code class=\"language-text\">NODE_ENV</code>에 따라 각각 다른 주소가 들어가도록 하는데 <code class=\"language-text\">@nestjs/config</code>를 쓰니 문제가 발생했다.\n<code class=\"language-text\">.env</code>와 <code class=\"language-text\">.env.development</code>, <code class=\"language-text\">.env.test</code>에 모두 <code class=\"language-text\">DATABASE_URL</code>이라는 같은 환경변수로 설정하고 돌렸더니 주구장창 <code class=\"language-text\">.env</code>에 있는 주소만 입력돼서 난감했다.\n<code class=\"language-text\">.env</code>는 <code class=\"language-text\">DATABASE_URL</code>로 유지하고 개발과 테스트 환경변수를 다른 이름으로 지정했더니 제대로 불러오는데 서버를 직접 돌릴때는 <code class=\"language-text\">NODE_ENV</code>를 바꿔가며 돌려봐도 문제없이 잘 돌아가는데 <code class=\"language-text\">jest</code>로 테스트만 돌리면 <code class=\"language-text\">config</code>가 환경변수를 불러오지 못했다.\n한참씨름하다가 그냥 <code class=\"language-text\">.env</code>에 <code class=\"language-text\">TEST_DATABASE_URL</code>로 Test DB 이름을 설정하고 <code class=\"language-text\">process.env</code>로 불러오는 방법을 택했다. 잘 돌아간다.</p>\n<h3>결과</h3>\n<p>이것저것 붙잡고 한참 씨름한 덕분에 <code class=\"language-text\">constructor</code>와 <code class=\"language-text\">super</code>에 대한 이해도와 <code class=\"language-text\">@nestjs/config</code>사용, 환경변수 적용이 익숙해졌다.\n뜯어보면 별거 아니지만 누군가는 나와 같은 문제를 겪을 수도 있을 것 같아 문제 해결하고 잊어버리기 전에 급하게 적었다.\n테스트도 결국 비용이고 대부분의 테스트코드가 <code class=\"language-text\">mocking</code>으로 적히는 걸로 보아 그게 효율적인 방법일 것 같아서 어느정도 DB에 직접 연결해서 테스트를 하다가 규모가 커지면 <code class=\"language-text\">mocking</code>해서 테스트 하는 방법으로 전환해야겠다.</p>","frontmatter":{"title":"[NestJS]NestJS에서 Prisma 사용하기","date":"June 08, 2022","update":"June 08, 2022","tags":["NestJS","Prisma","MongoDB","Jest"],"series":null},"fields":{"slug":"/nestjs-prisma-dbhandling/","readingTime":{"minutes":9.975}}},"seriesList":{"edges":[{"node":{"id":"cac84ce9-a9cd-543e-a175-3e1f73b9f2db","fields":{"slug":"/init/"},"frontmatter":{"title":"Hello World!"}}},{"node":{"id":"b61a6bf6-30d5-5468-bca6-8c4399512593","fields":{"slug":"/nestjs-prisma-dbhandling/"},"frontmatter":{"title":"[NestJS]NestJS에서 Prisma 사용하기"}}}]},"previous":{"fields":{"slug":"/init/"},"frontmatter":{"title":"Hello World!"}},"next":null},"pageContext":{"id":"b61a6bf6-30d5-5468-bca6-8c4399512593","series":null,"previousPostId":"cac84ce9-a9cd-543e-a175-3e1f73b9f2db","nextPostId":null}},"staticQueryHashes":[]}