<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[RSS Feed of 베짱이.dev]]></title><description><![CDATA[Welcome!]]></description><link>https://grasshopper42.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 07 Jul 2022 17:16:27 GMT</lastBuildDate><item><title><![CDATA[Tmux Setting]]></title><description><![CDATA[개발을 처음 배울때부터 WSL을 세팅해서 사용했지만 VSC를 주로 사용하다보니 기본적인 세팅만 해두고 썼지만 이번에 백엔드를 Spring boot로 전환하면서 Vim을 적극적으로 이용해보기로 했다.
Vim…]]></description><link>https://grasshopper42.github.io/tmux-init/</link><guid isPermaLink="false">https://grasshopper42.github.io/tmux-init/</guid><content:encoded>&lt;p&gt;개발을 처음 배울때부터 WSL을 세팅해서 사용했지만 VSC를 주로 사용하다보니 기본적인 세팅만 해두고 썼지만 이번에 백엔드를 Spring boot로 전환하면서 Vim을 적극적으로 이용해보기로 했다.
Vim을 이용하려고 세팅을 좀 만지다보니 또 세팅병이 도져서 터미널을 갈아엎었다고 볼 수 있을만큼 손을 많이 댔는데 이 과정에서 하루~이틀정도 삽질을 했던것같다.
여러가지 플러그인과 세팅들이 있지만 가장 먼저 Tmux세팅부터 남긴다.&lt;/p&gt;
&lt;h2&gt;Tmux?&lt;/h2&gt;
&lt;p&gt;Tmux는 &lt;strong&gt;Terminal multiplexer&lt;/strong&gt;의 일종인데 터미널 화면을 분할해서 사용할 수 있다.
세션에서 서버를 실행중이라면 종료하지 않고 최소화와 같은 기능으로도 사용할 수 있지만 나는 화면분할 위주로 사용하고 있다.&lt;/p&gt;
&lt;h2&gt;용어&lt;/h2&gt;
&lt;p&gt;본격적인 사용에 앞서 사용과 설정에서의 이해를 위해 Tmux의 실행단위들을 알아보자  &lt;/p&gt;
&lt;h3&gt;Pane&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pane&lt;/strong&gt;은 Tmux에서 가장 작은 실행단위로 Tmux에서 화면을 분할한다는 것은 이 Pane을 생성한다는 뜻이다.
가로나 세로로 분할할 수 있고 특정 커맨드를 입력하면 Pane의 갯수에 맞춰 추천하는 화면 구성을 돌아가며 전환해준다.&lt;/p&gt;
&lt;h3&gt;Window&lt;/h3&gt;
&lt;p&gt;Pane이 한개 이상 모여 &lt;strong&gt;Window&lt;/strong&gt;를 구성한다.
Window는 VSC나 브라우저의 탭으로 이해하면 되는데 동일한 화면에 나타나지는 않지만 실행중인 세션에서 옮겨가며 사용할 수 있다.&lt;/p&gt;
&lt;h3&gt;Session&lt;/h3&gt;
&lt;p&gt;Window가 하나 이상 모이면 &lt;strong&gt;Session&lt;/strong&gt;이 구성된다.
&lt;strong&gt;Session&lt;/strong&gt;은 tmux에서 관리하는 가장 큰 실행단위로 tmux를 실행하면 가장 먼저 생성되는 요소이다.
VSC에서의 창 하나로 이해하면 될 것 같다.
&lt;code class=&quot;language-text&quot;&gt;detach&lt;/code&gt;로 작업을 유지한채 최소화 시키고 &lt;code class=&quot;language-text&quot;&gt;attach&lt;/code&gt;를 통해 다시 열 수 있다.&lt;/p&gt;
&lt;h2&gt;설치&lt;/h2&gt;
&lt;p&gt;Ubuntu를 기준으로 설치는 아주 쉽다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; tmux&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치가 다 됐으면 &lt;code class=&quot;language-text&quot;&gt;tmux&lt;/code&gt;를 입력해 실행할 수 있다.&lt;/p&gt;
&lt;h2&gt;설정&lt;/h2&gt;
&lt;p&gt;아래는 내가 사용하고 있는 .tmux.conf이다.
root디렉토리(Ubuntu라면 &lt;code class=&quot;language-text&quot;&gt;~/&lt;/code&gt;)에 &lt;code class=&quot;language-text&quot;&gt;.tmux.conf&lt;/code&gt;파일을 만들어주면 된다.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;.tmux.conf&lt;/summary&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;conf&quot;&gt;&lt;pre class=&quot;language-conf&quot;&gt;&lt;code class=&quot;language-conf&quot;&gt;# rmap prefix from &amp;#39;C-b&amp;#39; to &amp;#39;C-a&amp;#39;
unbind C-b
unbind C-Space
set-option -g prefix C-a
bind-key C-a send-prefix

# split panes using | and -
bind | split-window -h
bind - split-window -v
unbind &amp;#39;&amp;quot;&amp;#39;
unbind %

# reload config file
bind r source-file ~/.tmux.conf\; display-message &amp;quot;Config reloaded.&amp;quot;

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# vim setting
is_vim=&amp;quot;ps-o state= -o comm= -t &amp;#39;#{pane_tty}&amp;#39; \
    | grep -iqE &amp;#39;^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$&amp;#39;&amp;quot;

bind-key -n C-h  if-shell  &amp;quot;$is_vim&amp;quot;  &amp;quot;send-keys C-h&amp;quot;  &amp;quot;select-pane -L&amp;quot;
bind-key -n C-j   if-shell  &amp;quot;$is_vim&amp;quot;  &amp;quot;send-keys C-j&amp;quot;   &amp;quot;select-pane -D&amp;quot;
bind-key -n C-k  if-shell  &amp;quot;$is_vim&amp;quot;  &amp;quot;send-keys C-k&amp;quot;  &amp;quot;select-pane -U&amp;quot;
bind-key -n C-l   if-shell  &amp;quot;$is_vim&amp;quot;  &amp;quot;send-keys C-l&amp;quot;   &amp;quot;select-pane -R&amp;quot;
bind-key -n C-\   if-shell  &amp;quot;$is_vim&amp;quot;  &amp;quot;send-keys C-\\&amp;quot;  &amp;quot;select-pane -l&amp;quot; 

# Enable mouse control (clickable windows, panes, resizable panes)
set -g mouse on

# don&amp;#39;t rename windows automatically
set-option -g allow-rename off

# tmux
set-option -sg escape-time 10
set-option -g default-terminal &amp;#39;tmux-256color&amp;#39;
set-option -ga terminal-overrides &amp;#39;,*256col*:Tc&amp;#39;
set-option -g focus-events on

######################################
###########Design change##############
######################################

## loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity on
set-option -g bell-action none

# modes
setw -g clock-mode-colour colour5
setw -g mode-style bold
setw -g mode-style fg=colour1
setw -g mode-style bg=colour18

# panes
set -g pane-border-style bg=colour0
set -g pane-border-style fg=colour255
set -g pane-active-border-style bg=colour242
set -g pane-active-border-style fg=colour83

# statusbar
set -g status-position bottom
set -g status-justify left
set -g status-bg colour18
set -g status-fg colour137
set -g window-status-style dim
set -g status-left &amp;quot;#{?client_prefix,Ω,ω}&amp;quot;
set -g status-right &amp;quot;#{cpu_bg_color} CPU: #{cpu_icon} #{cpu_percentage} | #[fg=colour233,bg=colour19,bold] %d/%m #[fg=colour233,bg=colour8,bold] %H:%M:%S &amp;quot;
set -g status-right-length 120
set -g status-left-length 20

setw -g window-status-current-style fg=colour1
setw -g window-status-current-style bg=colour18
setw -g window-status-current-style bold
setw -g window-status-current-format &amp;#39; #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour248]#F &amp;#39;
setw -g window-status-style fg=colour9
setw -g window-status-style bg=colour18
setw -g window-status-style none
setw -g window-status-format &amp;#39; #I#[fgcolour237]:#[fg=colour250]#W#[fg=colour244]#F &amp;#39;e

# List of plugins
set -g @plugin &amp;#39;tmux-plugins/tpm&amp;#39;
set -g @plugin &amp;#39;tmux-plugins/tmux-sensible&amp;#39;
set -g @plugin &amp;#39;tmux-plugins/tmux-cpu&amp;#39;
set -g @plugin &amp;#39;egel/tmux-gruvbox&amp;#39;

set -g @tmux-gruvbox &amp;#39;dark&amp;#39;

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run &amp;#39;~/.tmux/plugins/tpm/tpm&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;100줄 가까이 되는 길이라 줄였다. 순서대로 살펴보자면, 가장 먼저 &lt;code class=&quot;language-text&quot;&gt;prefix&lt;/code&gt;키를 기본 설정돼있는 &lt;code class=&quot;language-text&quot;&gt;Ctrl&lt;/code&gt;+&lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;Ctrl&lt;/code&gt;+&lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;로 바꿔줬다.
기본 &lt;code class=&quot;language-text&quot;&gt;Ctrl&lt;/code&gt;키 위치에서도 &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt;보다 &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;가 누르기 편하기도 하고 나는 &lt;code class=&quot;language-text&quot;&gt;Capslock&lt;/code&gt;버튼과 &lt;code class=&quot;language-text&quot;&gt;Ctrl&lt;/code&gt;버튼을 바꿔줬기 때문에 바로 옆에 붙어있어서 더 편했다.
그리고 수평분할을 &lt;code class=&quot;language-text&quot;&gt;prefix&lt;/code&gt;+&lt;code class=&quot;language-text&quot;&gt;|&lt;/code&gt;, 수직분할을 &lt;code class=&quot;language-text&quot;&gt;prefix&lt;/code&gt;+&lt;code class=&quot;language-text&quot;&gt;-&lt;/code&gt;로 바꿔줬다.&lt;/p&gt;
&lt;p&gt;tmux는 &lt;code class=&quot;language-text&quot;&gt;truecolor&lt;/code&gt;를 지원하는데 이것 때문에 계속 오류가 떠서 애를 좀 먹었다.
중간에 &lt;em&gt;tmux&lt;/em&gt; 주석 처리 된 부분이 문제의 부분인데 여기저기 찾아보면서 만지작거리다가 이 설정으로 해결됐다.
.zshrc에서 아래의 설정도 해 줘야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;zshrc&quot;&gt;&lt;pre class=&quot;language-zshrc&quot;&gt;&lt;code class=&quot;language-zshrc&quot;&gt;export TERM=tmux-256color&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 아래 디자인 부분은 tmux 상태바와 기타 다른부분들 디자인인데 잘 모르겠어서 다른 분의 configuration을 그대로 사용했다.
상태바는 맨 아래 부분에서 볼 수 있듯 플러그인을 설치해서 사용중인데 플러그인별로 스타일을 설정하거나 고정돼있어서 딱히 필요없는 듯 하다.
tmux 플러그인은 &lt;a href=&quot;https://github.com/tmux-plugins/tpm&quot;&gt;깃허브&lt;/a&gt;에서 플러그인 매니저를 설치한 후에 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;처음 설정을 했다면 저장 후 tmux를 실행하던가 이미 실행중이라면 터미널에 아래 명령어를 입력해서 reload시켜주자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;tmux &lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; ~/.tmux.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음 &lt;code class=&quot;language-text&quot;&gt;.tmux.conf&lt;/code&gt;가 적용되고 나서 위 conf처럼 단축키를 지정해줬다면 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;prefix&gt;&lt;/code&gt;+&lt;code class=&quot;language-text&quot;&gt;r&lt;/code&gt;키를 이용해 간편하게 reloading할 수 있다.&lt;/p&gt;
&lt;h2&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hbase.tistory.com/200&quot;&gt;https://hbase.tistory.com/200&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@piopiop/Linux-tmux%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90&quot;&gt;https://velog.io/@piopiop/Linux-tmux%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@ur-luella/tmux-%EC%82%AC%EC%9A%A9%EB%B2%95&quot;&gt;https://velog.io/@ur-luella/tmux-%EC%82%AC%EC%9A%A9%EB%B2%95&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://data-newbie.tistory.com/226&quot;&gt;https://data-newbie.tistory.com/226&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/&quot;&gt;https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[[오삽내]private LocalDateTime 에러 해결...]]></title><description><![CDATA[…]]></description><link>https://grasshopper42.github.io/spring-boot-localdatetime-error/</link><guid isPermaLink="false">https://grasshopper42.github.io/spring-boot-localdatetime-error/</guid><pubDate>Thu, 07 Jul 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;오삽내&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;오늘의 삽질 내용&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;서비스 백엔드를 &lt;code class=&quot;language-text&quot;&gt;NestJS&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;Spring&lt;/code&gt;으로 넘어가면서 &lt;code class=&quot;language-text&quot;&gt;Java&lt;/code&gt;까지 통으로 새로배우면서 뚝딱거리려니 힘들다. 그나마 &lt;code class=&quot;language-text&quot;&gt;TypeScript&lt;/code&gt;로 타입지정하고 &lt;code class=&quot;language-text&quot;&gt;NestJS&lt;/code&gt;에서 데코레이션 달아보고 &lt;code class=&quot;language-text&quot;&gt;JavaScript&lt;/code&gt;와 유사한 부분도 있어서 한결 수월하다는데 위안을 삼고 있다.
오늘은 몇시간동안 낑낑거렸는데 허무하게 끝난 Trouble Shooting이 구글링할때 나오지 않은게 아쉬워 짧게나마 삽질 내용을 남겨보려한다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;Spring Data Mongodb&lt;/code&gt;로 DB연결하고 간단한 CRUD코드 몇개 만들어서 테스트를 돌려보는데 전혀 예상치도 못결 부분에서 에러가 터졌다.
&lt;code class=&quot;language-text&quot;&gt;createdAt&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;Date&lt;/code&gt;타입을 적용하기 위해 선언한 &lt;code class=&quot;language-text&quot;&gt;LocalDateTime&lt;/code&gt;타입에서 오류가 나서 클래스가 생성되지 못하고 꺼져버리는 것이었다.
몇시간동안 구글링을 했는데 답이나오지 않아 스택오버플로우에 질문을 올리고 혼자 깨달음을 얻어 허무하게 끝나버렸다.&lt;/p&gt;
&lt;h2&gt;문제&lt;/h2&gt;
&lt;p&gt;아래는 &lt;code class=&quot;language-text&quot;&gt;LocalDateTime&lt;/code&gt;타입이 사용된 &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;모델의 일부이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// User.java&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Document&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectId&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@CreatedDate&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt; createdAt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@LastModifiedDate&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt; updatedAt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; username&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 상태로 테스트를 돌렸더니 아래의 에러를 볼 수 있었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make private java.time.LocalDateTime(java.time.LocalDate,java.time.LocalTime) accessible: module java.base does not &amp;quot;opens java.time&amp;quot; to unnamed module&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 에러 문구를 가지고 이렇게 저렇게 조합해보면서 구글링을 하다가 한 &lt;a href=&quot;https://stackoverflow.com/questions/70412805/what-does-this-error-mean-java-lang-reflect-inaccessibleobjectexception-unable&quot;&gt;스택오버플로우 답변&lt;/a&gt;을 발견했다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;start-argument&lt;/code&gt;로 &lt;code class=&quot;language-text&quot;&gt;--add-opens java.base/java.time=ALL-UNNAMED&lt;/code&gt;를 입력하라는 글이었는데, 이게 도통 뭔소리고 VSC에서 어떻게 입력해줘야 할지도 모르겠어서 넘겨버렸다.
한참 낑낑대다가 스택오버플로우 질문을 남겼더니 위 답변의 링크를 주면서 이걸로 해결이 안되냐는 코멘트가 달렸다. 이게 진짜 되는건가 하고 VSC로 vm 설정하는 법을 찾아서 입력해봤다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VSC에서 위와 같은 args를 입력하기 위해서는 상단 &lt;strong&gt;Run&lt;/strong&gt;탭에서 &lt;strong&gt;Add Configuration&lt;/strong&gt;을 누르고 뜨는 &lt;code class=&quot;language-text&quot;&gt;launch.json&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;vmArgs&lt;/code&gt;을 키로 추가한 뒤 값에는 &lt;code class=&quot;language-text&quot;&gt;-add-opens java.base/...&lt;/code&gt;을 입력해주면 된다.
IDE 짱짱맨... vim은 그냥 VSC 플러그인으로만 쓰는걸로...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;해결&lt;/h2&gt;
&lt;p&gt;이제 Application 구동은 되는데 여전히 test에서는 같은 에러가 뜬다. 뭐가 문제인가 하고 Application을 다시 실행해 봤더니 로그에서 아래와 같은 경고문구를 볼 수 있었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;WARN 17980 --- [  restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn&amp;#39;t convert from a store-supported type; You might want to check your annotation setup at the converter implementation&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;시스템에서 &lt;code class=&quot;language-text&quot;&gt;java.time.LocalDateTime&lt;/code&gt;을 &lt;code class=&quot;language-text&quot;&gt;org.joda.time.LocalDateTime&lt;/code&gt;으로 convert 시켜같는 것 같다. 그래서 convert할 필요 없게 package를 바꿔줬다. 아래는 바뀐 코드이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// User.java&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;joda&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 바뀐부분&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Document&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectId&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@CreatedDate&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt; createdAt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@LastModifiedDate&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt; updatedAt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; username&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다른 모델도 다 바꿔줬다. 이제 테스트에서도 에러가 뜨지 않고 잘 돌아간다.&lt;/p&gt;
&lt;h2&gt;이유&lt;/h2&gt;
&lt;p&gt;는 잘 모르겠다... 구글링하다보니 &lt;code class=&quot;language-text&quot;&gt;java.time&lt;/code&gt; 뿐만 아니라 &lt;code class=&quot;language-text&quot;&gt;java.util&lt;/code&gt;같은 다른 자바 내장 패키지들도 이따금 private으로 선언하면 비슷한 에러를 띄우는것 같았다.
&lt;code class=&quot;language-text&quot;&gt;java.time&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;ZonedDateTime&lt;/code&gt;을 사용하는 경우도 있는것 같았는데 이건 자체적으로 convert가 되지 않는 것 같다.
그래서 Converter를 따로 구현해서 주입해줘야 한다. &lt;a href=&quot;https://www.baeldung.com/spring-data-mongodb-zoneddatetime&quot;&gt;참고&lt;/a&gt;&lt;br&gt;
LocalDateTime과 ZonedDateTime의 차이를 비교해보고 더 유용하겠다 싶으면 적용해봐야겠다.&lt;/p&gt;
&lt;h2&gt;참고자료&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/70412805/what-does-this-error-mean-java-lang-reflect-inaccessibleobjectexception-unable&quot;&gt;StackOverflow&lt;/a&gt;
&lt;a href=&quot;https://www.baeldung.com/spring-data-mongodb-zoneddatetime&quot;&gt;ZonedDateTime Converter&lt;/a&gt;
&lt;a href=&quot;https://d2.naver.com/helloworld/645609&quot;&gt;NaverD2&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Gatsby]블로그에 Google Analytics 연결]]></title><description><![CDATA[블로그 방문 통계 분석 블로그를 이왕시작한거 방문수도 체크해보기로 했다.
여기저기 기웃거리면서 따라해봤는데 github page…]]></description><link>https://grasshopper42.github.io/gatsby-analytics/</link><guid isPermaLink="false">https://grasshopper42.github.io/gatsby-analytics/</guid><pubDate>Thu, 09 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;블로그 방문 통계 분석&lt;/h2&gt;
&lt;p&gt;블로그를 이왕시작한거 방문수도 체크해보기로 했다.
여기저기 기웃거리면서 따라해봤는데 github page 배포 딜레이때문인지 측정이 안돼서 당황했다.
이것저것 만지다보니 되긴 했는데 정확히 어떤부분인지는 모르겠다.
일단 현재 상태 기준으로 작성하기로 했다.(2022.06.09 기준)&lt;/p&gt;
&lt;h2&gt;1. &lt;strong&gt;Google Aanlytics&lt;/strong&gt; 설정&lt;/h2&gt;
&lt;p&gt;먼저 &lt;a href=&quot;http://analytics.google.com/&quot;&gt;&lt;strong&gt;Google Analytics&lt;/strong&gt; 홈페이지&lt;/a&gt;에 들어가 계정을 만들고 속성을 설정해준다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/1-511540b0b57d4f27c8fc78eecd3e18c3.jpg&quot; alt=&quot;계정 생성&quot;&gt;&lt;/p&gt;
&lt;p&gt;계정 이름을 입력하고 계정 데이터 공유 설정을 해준다.
처음부터 Google제품 및 서비스를 제외한 나머지 3항목이 체크되어있다.
나는 계정 이름은 grasshopper42, 체크박스는 처음 그대로 진행했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/2-e3c9f6901d969c31c984d2bbe2a2fcf7.jpg&quot; alt=&quot;속성 설정&quot;&gt;
계정을 만들고 다음을 누르면 이제 데이터 측정을 위한 속성설정을 해야한다.
개발블로그 추적을 위한 속성이기 때문에 속성 이름은 dev blog로 했다.
시간대와 통화는 기본으로 미국과 달러로 기본설정되어있기 때문에 각각 대한민국과 원으로 바꿔준다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/3-cd33cff56a11b9700ab1cbced6a243ae.jpg&quot; alt=&quot;비즈니스 정보&quot;&gt;
비즈니스 정보는 그렇게 중요할것같지 않아서 대충 설정했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/4-074955696b93499e55cebb6402a87577.jpg&quot; alt=&quot;플랫폼 선택&quot;&gt;
이제 플랫폼을 선택해야하는데 블로그를 추적할 계획이니까 &lt;strong&gt;웹&lt;/strong&gt;을 선택한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/5-570c7f9859edb994d7e45582dbb5e64a.jpg&quot; alt=&quot;데이터 스트림 설정&quot;&gt;
데이터를 스트리밍할 블로그 정보를 입력해준다.
나는 grasshopper42.github.io/ 와 Dev blog라고 입력했다.
아래 향상된 측정 부분에 측정할 데이터를 선택할 수 있는데 기본 그대로 뒀다.&lt;/p&gt;
&lt;p&gt;여기까지 설정을 마쳤으면 웹 스트림 세부정보라는 창이 뜨면서 &lt;strong&gt;측정ID&lt;/strong&gt;값을 얻을 수 있다.&lt;/p&gt;
&lt;h2&gt;2. gatsby-plugin-gtag&lt;/h2&gt;
&lt;p&gt;이제 블로그와 &lt;strong&gt;Google Analytics&lt;/strong&gt;를 연결해주기 위해 &lt;strong&gt;Gatsby&lt;/strong&gt;에 &lt;strong&gt;plugin&lt;/strong&gt;을 설치해준다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; gatsby-plugin-gtag&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;플러그인 설치가 완료되었으면 프로젝트 루트 폴더의 &lt;code class=&quot;language-text&quot;&gt;gatsby-config.js&lt;/code&gt;를 열어서 &lt;code class=&quot;language-text&quot;&gt;plugin&lt;/code&gt;을 추가해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/gatsby-config.js&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...other options&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;gatsby-plugin-gtag&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Google Analytics에서 얻은 측정ID를 입력&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;trackingId&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;측정ID&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// gtag tracking script를 배포될 html의 head에 넣을지 선택&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// IP 익명화 선택&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;anonymize&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...other plugins&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 블로그를 다시 배포하고 블로그에 방문한 다음 Google Analytics 대쉬보드를 보면 사용자 1이 증가하는 모습을 볼 수 있다.
&lt;code class=&quot;language-text&quot;&gt;head&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;로 설정했다면 블로그에서 개발자도구를 열어 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;head&gt;&lt;/code&gt;에 다음과 같은 코드가 있는지 보면 제대로 입력이 됐는지 알 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://www.googletagmanager.com/gtag/js?id=측정ID&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  &lt;span class=&quot;token comment&quot;&gt;//... trackingId, options&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/plugins/gatsby-plugin-gtag/#gatsby-plugin-gtag&quot;&gt;https://www.gatsbyjs.com/plugins/gatsby-plugin-gtag/#gatsby-plugin-gtag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inasie.github.io/it%EC%9D%BC%EB%B0%98/1/&quot;&gt;https://inasie.github.io/it%EC%9D%BC%EB%B0%98/1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://janeljs.github.io/blog/google-analytics/&quot;&gt;https://janeljs.github.io/blog/google-analytics/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devfoxstar.github.io/web/gatsby-ga-tracking/&quot;&gt;https://devfoxstar.github.io/web/gatsby-ga-tracking/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog-lino.dev/trouble-shooting/ga4-issues/&quot;&gt;https://blog-lino.dev/trouble-shooting/ga4-issues/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[[NestJS]NestJS에서 Prisma 사용하기]]></title><description><![CDATA[NestJS + Prisma 처음 백엔드를 구축할때 Apollo + GraphQL을 사용하기로 하면서 쓰기 시작한 Prisma를 NestJS + RestAPI로 migration하면서 NestJS와 많이 쓰는 TypeORM…]]></description><link>https://grasshopper42.github.io/nestjs-prisma-dbhandling/</link><guid isPermaLink="false">https://grasshopper42.github.io/nestjs-prisma-dbhandling/</guid><pubDate>Wed, 08 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;NestJS + Prisma&lt;/h2&gt;
&lt;p&gt;처음 백엔드를 구축할때 &lt;strong&gt;Apollo + GraphQL&lt;/strong&gt;을 사용하기로 하면서 쓰기 시작한 &lt;strong&gt;Prisma&lt;/strong&gt;를 &lt;strong&gt;NestJS + RestAPI&lt;/strong&gt;로 migration하면서 &lt;strong&gt;NestJS&lt;/strong&gt;와 많이 쓰는 &lt;strong&gt;TypeORM&lt;/strong&gt;보다 익숙하고 편리해서 가져왔는데 막상 쓰려니 부족한 자료에 지금이라도 &lt;strong&gt;TypeORM&lt;/strong&gt;으로 넘어가야하나 하는 고민을 수없이 했다.
가장 큰 문제는 &lt;strong&gt;OOP&lt;/strong&gt;환경에 대한 &lt;strong&gt;Prisma&lt;/strong&gt;의 문서부족이었다.
기본적인 세팅에 대한 부분은 &lt;strong&gt;Prisma&lt;/strong&gt;와 &lt;strong&gt;NestJS&lt;/strong&gt;공식문서에 잘 나와있었지만 조금만 깊어지면 문서가 영문으로조차 없어서 며칠동안 삽질을 했다.
대체적으로 &lt;strong&gt;OOP&lt;/strong&gt;와 &lt;strong&gt;테스트&lt;/strong&gt;에 대한 내 이해부족때문이었다.
NestJS시작부터 글을 적을 생각이었지만 기억이 날아갈까봐 우선 Prisma적용에 대한 글부터 남긴다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여러모로 부족해 설명에 오류나 누락이 있을 수 있습니다. 혹시나 이 글을 보신다면 많은 피드백 부탁드립니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1. NestJS에 PrismaClient 생성&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;우선 &lt;strong&gt;NestJS&lt;/strong&gt;와 &lt;strong&gt;Prisma&lt;/strong&gt; 기본세팅이 돼있다는걸 가정하고 바로 &lt;strong&gt;PrismaClient&lt;/strong&gt;생성으로 넘어간다. &lt;code class=&quot;language-text&quot;&gt;nest-cli&lt;/code&gt;를 이용해 &lt;code class=&quot;language-text&quot;&gt;prisma&lt;/code&gt;모듈과 서비스를 생성해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nest g mo prisma &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nest g s prisma&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;prisma.service.ts&lt;/code&gt;에서 아래의 코드를 입력한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/prisma/prisma.service.ts&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; INestApplication&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Injectable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; OnModuleInit &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nestjs/common&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; PrismaClient &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../../prisma/generated&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//보통은 @prisma/client에서 불러오지만 yarn berry를 써서 따로 생성된 디렉토리에서 불러왔다.&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaService&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaClient&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnModuleInit&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onModuleInit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;enableShutdownHook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; INestApplication&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;beforeExit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서부터 당황스러웠다. 지금까지 프리즈마 클라이언트를 생성하면 &lt;code class=&quot;language-text&quot;&gt;const prisma = new PrismaClient()&lt;/code&gt;같은 방법을 썼는데 서비스를 &lt;code class=&quot;language-text&quot;&gt;PrismaClient&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;extends&lt;/code&gt;하고 이걸 &lt;code class=&quot;language-text&quot;&gt;onModuleInit&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;implement&lt;/code&gt;를 한다.&lt;em&gt;&lt;a href=&quot;https://www.howdy-mj.me/typescript/extends-and-implements/&quot;&gt;extends? implement?&lt;/a&gt;&lt;/em&gt; &lt;a href=&quot;https://docs.nestjs.com/recipes/prisma&quot;&gt;공식문서&lt;/a&gt;에 이유가 상세히 잘 나와있지만 간단하게 설명하자면 &lt;strong&gt;Prisma&lt;/strong&gt;를 &lt;strong&gt;DB&lt;/strong&gt;에 빠르게 연결하기 위해 &lt;code class=&quot;language-text&quot;&gt;onModuleInit&lt;/code&gt;을 사용한다. 선택사항이지만 사용하지 않을경우 &lt;strong&gt;Prisma&lt;/strong&gt;는 첫 호출이 있기 전까지 &lt;strong&gt;DB&lt;/strong&gt;에 연결하지 않는다. &lt;code class=&quot;language-text&quot;&gt;enableShutdownHooks&lt;/code&gt;는 &lt;a href=&quot;https://docs.nestjs.com/recipes/prisma#issues-with-enableshutdownhooks&quot;&gt;공식문서&lt;/a&gt;와 &lt;a href=&quot;https://progressivecoder.com/build-a-nestjs-prisma-rest-api/&quot;&gt;이 포스트&lt;/a&gt;를 보면 &lt;strong&gt;Prisma&lt;/strong&gt;와 &lt;strong&gt;NestJS&lt;/strong&gt;가 종료메서드에 상호간섭하기 때문에 서비스에서 함수를 생성하고 &lt;code class=&quot;language-text&quot;&gt;main.ts&lt;/code&gt;에서 호출해서 종료를 강제해주는 것 같다.(이부분은 완벽하게 이해를 못했다.)&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;main.ts&lt;/summary&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/main.ts&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; NestFactory &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nestjs/core&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AppModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./app.module&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; PrismaService &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./prisma/prisma.service&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; NestFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AppModule&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prisma&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PrismaService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PrismaService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 prisma&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enableShutdownHooks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;prisma.module.ts&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;Global&lt;/code&gt;로 &lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt;해서 어느 모듈에서나 &lt;code class=&quot;language-text&quot;&gt;provider&lt;/code&gt;추가 없이 &lt;code class=&quot;language-text&quot;&gt;injection&lt;/code&gt;이 가능하도록 해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/prisma/primsa.module.ts&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Global&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Module &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nestjs/common&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; PrismaService &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./prisma.service&quot;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Global&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Module&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 providers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PrismaService&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 exports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PrismaService&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaModule&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 설정이 끝났고 다른 서비스에서 &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;PrismaService&lt;/code&gt;를 불러와 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/post/post.service.ts&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Injectable &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nest/common&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Post &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;prisma/generated&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; PrismaService &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;src/prisma/prisma.service&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PostService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; prisma&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PrismaService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;

 &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Post &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prisma&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findUnique&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     where&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;2. 테스트?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;을 버리고 처음 &lt;strong&gt;NextJS&lt;/strong&gt;에서 기본 API routing으로 백엔드 기능을 구현했을때는 빠르게 최소한의 기능만 구축하기 위해서 테스트를 전혀 안하다가 &lt;strong&gt;NestJS&lt;/strong&gt;로 넘어오면서 &lt;strong&gt;TDD&lt;/strong&gt;를 해봐야겠다는 욕심(?)이 생겼다.
테스트는 기본 설정돼있는 &lt;strong&gt;Jest&lt;/strong&gt;로 하려했는데 nomadcoder에서 NestJS + Jest 기본 강의만 듣고 시작한 나에게 &lt;strong&gt;TDD&lt;/strong&gt;는 너무 큰 산이었다.
아직 간단한 CRUD밖에 없기때문에 테스트코드야 어떻게 짠다지만 &lt;strong&gt;DB&lt;/strong&gt;와 &lt;strong&gt;ORM&lt;/strong&gt;은 어떻게 해야하는지 전혀 감이 오지 않았다.
당장에 &lt;strong&gt;Jest&lt;/strong&gt;자체도 낯설었다.
구글을 뒤져 &lt;strong&gt;NestJS&lt;/strong&gt;와 &lt;strong&gt;Prisma&lt;/strong&gt;를 사용해 테스트하는 예제 몇개를 구할 수 있었지만 대부분 &lt;strong&gt;Prisma&lt;/strong&gt;를 &lt;code class=&quot;language-text&quot;&gt;mocking&lt;/code&gt;해서 테스트하는 방식이었다.
하지만 &lt;strong&gt;Prisma&lt;/strong&gt;자체가 제대로 돌아갈지도 미지수인 상황에서 &lt;code class=&quot;language-text&quot;&gt;mocking&lt;/code&gt;만 해봤자 무슨의미인가 싶고 &lt;strong&gt;TDD&lt;/strong&gt;를 도입하는 만큼 수동테스트를 최대한 줄이고싶었다.
문제는 현재 개발용 DB에 테스트용 더미데이터를 넣어뒀는데 계속 불필요한 테스트코드가 쌓이는것도 싫고, 만약 서비스를 배포한 후에도 같은 &lt;strong&gt;DB&lt;/strong&gt;에 연결되면 심각한 문제를 초래하기 때문에 별도의 테스트용 DB에 연결할 필요가 있었다.
지금까지는 다른 DB에 연결할 필요가 없었기 때문에 방법을 전혀 모르는 상태였다.
여러모로 방법을 찾아봤는데 처음 생각한 방안은 &lt;strong&gt;PrismaClient&lt;/strong&gt;를 &lt;strong&gt;서비스 DB&lt;/strong&gt;와 &lt;strong&gt;Test DB&lt;/strong&gt;에 각각 연결되도록 &lt;code class=&quot;language-text&quot;&gt;generate&lt;/code&gt;를 두번 하는 방법이었다.
하지만 방법도 복잡하고 &lt;strong&gt;Prisma Engine&lt;/strong&gt;이나 &lt;code class=&quot;language-text&quot;&gt;generate&lt;/code&gt;에 대한 이해가 부족해서 맞는 방법인지 확신이 없었다.&lt;/p&gt;
&lt;h3&gt;3. Prisma ↔ Test용 DB 연결&lt;/h3&gt;
&lt;p&gt;한참 공식문서를 뒤지다가 단서를 얻었다. &lt;strong&gt;PrismaClient&lt;/strong&gt;를 생성할 때 &lt;code class=&quot;language-text&quot;&gt;datasource&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;overriding&lt;/code&gt;하는 방법이었다.&lt;/p&gt;
&lt;p&gt;문제는 다시 &lt;strong&gt;OOP&lt;/strong&gt;로 돌아온다. &lt;strong&gt;FP&lt;/strong&gt;에서는&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prisma &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  datasource&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    db&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; DatabaseUrl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처럼 간단하게 &lt;code class=&quot;language-text&quot;&gt;datasource overriding&lt;/code&gt;을 할 수 있는데 &lt;strong&gt;NestJS&lt;/strong&gt;같은 &lt;strong&gt;Class&lt;/strong&gt;에서는 어떻게 해야할지 모르겠는데 자료도 없어 막막했다.
나오지도 않는 구글을 한참 뒤지다가, &lt;strong&gt;Prisma&lt;/strong&gt;랑 &lt;strong&gt;PrismaClient&lt;/strong&gt;라이브러리 소스를 한참뒤지다가 겨우 단서를 찾았다.
&lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;super&lt;/code&gt;로 선언해주면 되는 간단한 문제였다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;details&gt;
&lt;summary&gt;코드&lt;/summary&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/prisma/prisma.service.ts&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// import ...&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaService&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaClient&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;onModuleInit&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
      process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TEST_DATABASE_URL&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DATABASE_URL&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      datasources&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        db&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// async onModuleInit...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/blockquote&gt;
&lt;p&gt;방법은 찾았는데 DB URL을 어떻게 입력할지를 놓고 또 한참 씨름했다.
&lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;에 넣고 &lt;code class=&quot;language-text&quot;&gt;NODE_ENV&lt;/code&gt;에 따라 각각 다른 주소가 들어가도록 하는데 &lt;code class=&quot;language-text&quot;&gt;@nestjs/config&lt;/code&gt;를 쓰니 문제가 발생했다.
&lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;.env.development&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.env.test&lt;/code&gt;에 모두 &lt;code class=&quot;language-text&quot;&gt;DATABASE_URL&lt;/code&gt;이라는 같은 환경변수로 설정하고 돌렸더니 주구장창 &lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;에 있는 주소만 입력돼서 난감했다.
&lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;DATABASE_URL&lt;/code&gt;로 유지하고 개발과 테스트 환경변수를 다른 이름으로 지정했더니 제대로 불러오는데 서버를 직접 돌릴때는 &lt;code class=&quot;language-text&quot;&gt;NODE_ENV&lt;/code&gt;를 바꿔가며 돌려봐도 문제없이 잘 돌아가는데 &lt;code class=&quot;language-text&quot;&gt;jest&lt;/code&gt;로 테스트만 돌리면 &lt;code class=&quot;language-text&quot;&gt;config&lt;/code&gt;가 환경변수를 불러오지 못했다.
한참씨름하다가 그냥 &lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;TEST_DATABASE_URL&lt;/code&gt;로 Test DB 이름을 설정하고 &lt;code class=&quot;language-text&quot;&gt;process.env&lt;/code&gt;로 불러오는 방법을 택했다. 잘 돌아간다.&lt;/p&gt;
&lt;h3&gt;결과&lt;/h3&gt;
&lt;p&gt;이것저것 붙잡고 한참 씨름한 덕분에 &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;super&lt;/code&gt;에 대한 이해도와 &lt;code class=&quot;language-text&quot;&gt;@nestjs/config&lt;/code&gt;사용, 환경변수 적용이 익숙해졌다.
뜯어보면 별거 아니지만 누군가는 나와 같은 문제를 겪을 수도 있을 것 같아 문제 해결하고 잊어버리기 전에 급하게 적었다.
테스트도 결국 비용이고 대부분의 테스트코드가 &lt;code class=&quot;language-text&quot;&gt;mocking&lt;/code&gt;으로 적히는 걸로 보아 그게 효율적인 방법일 것 같아서 어느정도 DB에 직접 연결해서 테스트를 하다가 규모가 커지면 &lt;code class=&quot;language-text&quot;&gt;mocking&lt;/code&gt;해서 테스트 하는 방법으로 전환해야겠다.&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.nestjs.com/recipes/prisma&quot;&gt;NestJS 공식문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#datasources&quot;&gt;Prisma 공식문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://progressivecoder.com/build-a-nestjs-prisma-rest-api/&quot;&gt;https://progressivecoder.com/build-a-nestjs-prisma-rest-api/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.logrocket.com/how-to-use-nestjs-prisma/&quot;&gt;https://blog.logrocket.com/how-to-use-nestjs-prisma/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Hello World!]]></title><description><![CDATA[Gatsby? 22년 새해를 맞아 만들었던 Jekyll블로그를 버리고 Gatsby…]]></description><link>https://grasshopper42.github.io/hello-world/</link><guid isPermaLink="false">https://grasshopper42.github.io/hello-world/</guid><pubDate>Fri, 03 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Gatsby?&lt;/h2&gt;
&lt;p&gt;22년 새해를 맞아 만들었던 Jekyll블로그를 버리고 Gatsby로 블로그를 옮겼다. 공부한 것들을 글로 남기자 다짐했지만 글로 정리한다는건 귀찮은 일이고 더군다나 익숙치도 않은 마크다운문법을 쓰려니 손에 잡히지가 않았다. 귀찮은 일이었지만 Gatsby로 옮긴건 그나마 React가 익숙한 까닭이다. 지금 서비스에 사용중인 NextJS를 쓸까도 생각해봤지만 직접 디자인하고 구현하려니 시간이 부족하고 template도 부족해 급한대로 Gatsby로 옮겼다.&lt;/p&gt;
&lt;h2&gt;다시 블로그를 잡은건&lt;/h2&gt;
&lt;p&gt;멀쩡한 Jekyll 블로그는 지금까지 쓰지도 않다가 굳이 Gatsby로 옮겨가며 글을 쓰는것은 슬슬 정리해두지 않고는 기억할 자신이 없어졌기 때문이다. unhide 서비스를 개발하며 혼자 풀스택으로 여러 프레임워크와 라이브러리를 급하게 공부해가며 쓰다보니 점점 헷갈리기 시작한다. 지금까지 써왔던 GraphQL을 버리고 NestJS로 옮겨가는 과정에서 내가 계속 들어다 볼 요량도 있지만 팀에 합류할 개발자를 위해서도 정리를 좀 해두려한다. NestJS 뿐만 아니라 언어나 다른 프레임워크 관련해서도 간단하게나마 조금씩 써둬야겠다.&lt;/p&gt;</content:encoded></item></channel></rss>