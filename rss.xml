<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[RSS Feed of 베짱이.dev]]></title><description><![CDATA[Welcome!]]></description><link>https://grasshopper42.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 08 Jun 2022 20:09:16 GMT</lastBuildDate><item><title><![CDATA[[NestJS]NestJS에서 Prisma 사용하기]]></title><description><![CDATA[NestJS + Prisma 처음 백엔드를 구축할때 Apollo + GraphQL을 사용하기로 하면서 쓰기 시작한 Prisma를 NestJS + RestAPI로 migration하면서 NestJS와 많이 쓰는 TypeORM…]]></description><link>https://grasshopper42.github.io/nestjs-prisma-dbhandling/</link><guid isPermaLink="false">https://grasshopper42.github.io/nestjs-prisma-dbhandling/</guid><pubDate>Wed, 08 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;NestJS + Prisma&lt;/h2&gt;
&lt;p&gt;처음 백엔드를 구축할때 &lt;strong&gt;Apollo + GraphQL&lt;/strong&gt;을 사용하기로 하면서 쓰기 시작한 &lt;strong&gt;Prisma&lt;/strong&gt;를 &lt;strong&gt;NestJS + RestAPI&lt;/strong&gt;로 migration하면서 &lt;strong&gt;NestJS&lt;/strong&gt;와 많이 쓰는 &lt;strong&gt;TypeORM&lt;/strong&gt;보다 익숙하고 편리해서 가져왔는데 막상 쓰려니 부족한 자료에 지금이라도 &lt;strong&gt;TypeORM&lt;/strong&gt;으로 넘어가야하나 하는 고민을 수없이 했다.
가장 큰 문제는 &lt;strong&gt;OOP&lt;/strong&gt;환경에 대한 &lt;strong&gt;Prisma&lt;/strong&gt;의 문서부족이었다.
기본적인 세팅에 대한 부분은 &lt;strong&gt;Prisma&lt;/strong&gt;와 &lt;strong&gt;NestJS&lt;/strong&gt;공식문서에 잘 나와있었지만 조금만 깊어지면 문서가 영문으로조차 없어서 며칠동안 삽질을 했다.
대체적으로 &lt;strong&gt;OOP&lt;/strong&gt;와 &lt;strong&gt;테스트&lt;/strong&gt;에 대한 내 이해부족때문이었다.
NestJS시작부터 글을 적을 생각이었지만 기억이 날아갈까봐 우선 Prisma적용에 대한 글부터 남긴다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여러모로 부족해 설명에 오류나 누락이 있을 수 있습니다. 혹시나 이 글을 보신다면 많은 피드백 부탁드립니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1. NestJS에 PrismaClient 생성&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;우선 &lt;strong&gt;NestJS&lt;/strong&gt;와 &lt;strong&gt;Prisma&lt;/strong&gt; 기본세팅이 돼있다는걸 가정하고 바로 &lt;strong&gt;PrismaClient&lt;/strong&gt;생성으로 넘어간다. &lt;code class=&quot;language-text&quot;&gt;nest-cli&lt;/code&gt;를 이용해 &lt;code class=&quot;language-text&quot;&gt;prisma&lt;/code&gt;모듈과 서비스를 생성해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nest g mo prisma &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nest g s prisma&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;prisma.service.ts&lt;/code&gt;에서 아래의 코드를 입력한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/prisma/prisma.service.ts&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; INestApplication&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Injectable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; OnModuleInit &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nestjs/common&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; PrismaClient &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../../prisma/generated&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//보통은 @prisma/client에서 불러오지만 yarn berry를 써서 따로 생성된 디렉토리에서 불러왔다.&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaService&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaClient&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnModuleInit&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onModuleInit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;enableShutdownHook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; INestApplication&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;beforeExit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서부터 당황스러웠다. 지금까지 프리즈마 클라이언트를 생성하면 &lt;code class=&quot;language-text&quot;&gt;const prisma = new PrismaClient()&lt;/code&gt;같은 방법을 썼는데 서비스를 &lt;code class=&quot;language-text&quot;&gt;PrismaClient&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;extends&lt;/code&gt;하고 이걸 &lt;code class=&quot;language-text&quot;&gt;onModuleInit&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;implement&lt;/code&gt;를 한다.&lt;em&gt;&lt;a href=&quot;https://www.howdy-mj.me/typescript/extends-and-implements/&quot;&gt;extends? implement?&lt;/a&gt;&lt;/em&gt; &lt;a href=&quot;https://docs.nestjs.com/recipes/prisma&quot;&gt;공식문서&lt;/a&gt;에 이유가 상세히 잘 나와있지만 간단하게 설명하자면 &lt;strong&gt;Prisma&lt;/strong&gt;를 &lt;strong&gt;DB&lt;/strong&gt;에 빠르게 연결하기 위해 &lt;code class=&quot;language-text&quot;&gt;onModuleInit&lt;/code&gt;을 사용한다. 선택사항이지만 사용하지 않을경우 &lt;strong&gt;Prisma&lt;/strong&gt;는 첫 호출이 있기 전까지 &lt;strong&gt;DB&lt;/strong&gt;에 연결하지 않는다. &lt;code class=&quot;language-text&quot;&gt;enableShutdownHooks&lt;/code&gt;는 &lt;a href=&quot;https://docs.nestjs.com/recipes/prisma#issues-with-enableshutdownhooks&quot;&gt;공식문서&lt;/a&gt;와 &lt;a href=&quot;https://progressivecoder.com/build-a-nestjs-prisma-rest-api/&quot;&gt;이 포스트&lt;/a&gt;를 보면 &lt;strong&gt;Prisma&lt;/strong&gt;와 &lt;strong&gt;NestJS&lt;/strong&gt;가 종료메서드에 상호간섭하기 때문에 서비스에서 함수를 생성하고 &lt;code class=&quot;language-text&quot;&gt;main.ts&lt;/code&gt;에서 호출해서 종료를 강제해주는 것 같다.(이부분은 완벽하게 이해를 못했다.)&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;main.ts&lt;/summary&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/main.ts&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; NestFactory &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nestjs/core&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AppModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./app.module&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; PrismaService &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./prisma/prisma.service&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; NestFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AppModule&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prisma&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PrismaService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PrismaService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 prisma&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enableShutdownHooks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;prisma.module.ts&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;Global&lt;/code&gt;로 &lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt;해서 어느 모듈에서나 &lt;code class=&quot;language-text&quot;&gt;provider&lt;/code&gt;추가 없이 &lt;code class=&quot;language-text&quot;&gt;injection&lt;/code&gt;이 가능하도록 해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/prisma/primsa.module.ts&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Global&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Module &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nestjs/common&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; PrismaService &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./prisma.service&quot;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Global&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Module&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 providers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PrismaService&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 exports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PrismaService&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaModule&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 설정이 끝났고 다른 서비스에서 &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;PrismaService&lt;/code&gt;를 불러와 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/post/post.service.ts&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Injectable &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nest/common&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Post &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;prisma/generated&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; PrismaService &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;src/prisma/prisma.service&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PostService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; prisma&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PrismaService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;

 &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Post &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prisma&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findUnique&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     where&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;2. 테스트?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;을 버리고 처음 &lt;strong&gt;NextJS&lt;/strong&gt;에서 기본 API routing으로 백엔드 기능을 구현했을때는 빠르게 최소한의 기능만 구축하기 위해서 테스트를 전혀 안하다가 &lt;strong&gt;NestJS&lt;/strong&gt;로 넘어오면서 &lt;strong&gt;TDD&lt;/strong&gt;를 해봐야겠다는 욕심(?)이 생겼다.
테스트는 기본 설정돼있는 &lt;strong&gt;Jest&lt;/strong&gt;로 하려했는데 nomadcoder에서 NestJS + Jest 기본 강의만 듣고 시작한 나에게 &lt;strong&gt;TDD&lt;/strong&gt;는 너무 큰 산이었다.
아직 간단한 CRUD밖에 없기때문에 테스트코드야 어떻게 짠다지만 &lt;strong&gt;DB&lt;/strong&gt;와 &lt;strong&gt;ORM&lt;/strong&gt;은 어떻게 해야하는지 전혀 감이 오지 않았다.
당장에 &lt;strong&gt;Jest&lt;/strong&gt;자체도 낯설었다.
구글을 뒤져 &lt;strong&gt;NestJS&lt;/strong&gt;와 &lt;strong&gt;Prisma&lt;/strong&gt;를 사용해 테스트하는 예제 몇개를 구할 수 있었지만 대부분 &lt;strong&gt;Prisma&lt;/strong&gt;를 &lt;code class=&quot;language-text&quot;&gt;mocking&lt;/code&gt;해서 테스트하는 방식이었다.
하지만 &lt;strong&gt;Prisma&lt;/strong&gt;자체가 제대로 돌아갈지도 미지수인 상황에서 &lt;code class=&quot;language-text&quot;&gt;mocking&lt;/code&gt;만 해봤자 무슨의미인가 싶고 &lt;strong&gt;TDD&lt;/strong&gt;를 도입하는 만큼 수동테스트를 최대한 줄이고싶었다.
문제는 현재 개발용 DB에 테스트용 더미데이터를 넣어뒀는데 계속 불필요한 테스트코드가 쌓이는것도 싫고, 만약 서비스를 배포한 후에도 같은 &lt;strong&gt;DB&lt;/strong&gt;에 연결되면 심각한 문제를 초래하기 때문에 별도의 테스트용 DB에 연결할 필요가 있었다.
지금까지는 다른 DB에 연결할 필요가 없었기 때문에 방법을 전혀 모르는 상태였다.
여러모로 방법을 찾아봤는데 처음 생각한 방안은 &lt;strong&gt;PrismaClient&lt;/strong&gt;를 &lt;strong&gt;서비스 DB&lt;/strong&gt;와 &lt;strong&gt;Test DB&lt;/strong&gt;에 각각 연결되도록 &lt;code class=&quot;language-text&quot;&gt;generate&lt;/code&gt;를 두번 하는 방법이었다.
하지만 방법도 복잡하고 &lt;strong&gt;Prisma Engine&lt;/strong&gt;이나 &lt;code class=&quot;language-text&quot;&gt;generate&lt;/code&gt;에 대한 이해가 부족해서 맞는 방법인지 확신이 없었다.&lt;/p&gt;
&lt;h3&gt;3. Prisma ↔ Test용 DB 연결&lt;/h3&gt;
&lt;p&gt;한참 공식문서를 뒤지다가 단서를 얻었다. &lt;strong&gt;PrismaClient&lt;/strong&gt;를 생성할 때 &lt;code class=&quot;language-text&quot;&gt;datasource&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;overriding&lt;/code&gt;하는 방법이었다.&lt;/p&gt;
&lt;p&gt;문제는 다시 &lt;strong&gt;OOP&lt;/strong&gt;로 돌아온다. &lt;strong&gt;FP&lt;/strong&gt;에서는&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prisma &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  datasource&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    db&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; DatabaseUrl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처럼 간단하게 &lt;code class=&quot;language-text&quot;&gt;datasource overriding&lt;/code&gt;을 할 수 있는데 &lt;strong&gt;NestJS&lt;/strong&gt;같은 &lt;strong&gt;Class&lt;/strong&gt;에서는 어떻게 해야할지 모르겠는데 자료도 없어 막막했다.
나오지도 않는 구글을 한참 뒤지다가, &lt;strong&gt;Prisma&lt;/strong&gt;랑 &lt;strong&gt;PrismaClient&lt;/strong&gt;라이브러리 소스를 한참뒤지다가 겨우 단서를 찾았다.
&lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;super&lt;/code&gt;로 선언해주면 되는 간단한 문제였다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;details&gt;
&lt;summary&gt;코드&lt;/summary&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ~/src/prisma/prisma.service.ts&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// import ...&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaService&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrismaClient&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;onModuleInit&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      datasources&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        db&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TEST_DATABASE_URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// async onModuleInit...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;/blockquote&gt;
&lt;p&gt;방법은 찾았는데 DB URL을 어떻게 입력할지를 놓고 또 한참 씨름했다.
&lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;에 넣고 &lt;code class=&quot;language-text&quot;&gt;NODE_ENV&lt;/code&gt;에 따라 각각 다른 주소가 들어가도록 하는데 &lt;code class=&quot;language-text&quot;&gt;@nestjs/config&lt;/code&gt;를 쓰니 문제가 발생했다.
&lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;.env.development&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.env.test&lt;/code&gt;에 모두 &lt;code class=&quot;language-text&quot;&gt;DATABASE_URL&lt;/code&gt;이라는 같은 환경변수로 설정하고 돌렸더니 주구장창 &lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;에 있는 주소만 입력돼서 난감했다.
&lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;DATABASE_URL&lt;/code&gt;로 유지하고 개발과 테스트 환경변수를 다른 이름으로 지정했더니 제대로 불러오는데 서버를 직접 돌릴때는 &lt;code class=&quot;language-text&quot;&gt;NODE_ENV&lt;/code&gt;를 바꿔가며 돌려봐도 문제없이 잘 돌아가는데 &lt;code class=&quot;language-text&quot;&gt;jest&lt;/code&gt;로 테스트만 돌리면 &lt;code class=&quot;language-text&quot;&gt;config&lt;/code&gt;가 환경변수를 불러오지 못했다.
한참씨름하다가 그냥 &lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;TEST_DATABASE_URL&lt;/code&gt;로 Test DB 이름을 설정하고 &lt;code class=&quot;language-text&quot;&gt;process.env&lt;/code&gt;로 불러오는 방법을 택했다. 잘 돌아간다.&lt;/p&gt;
&lt;h3&gt;결과&lt;/h3&gt;
&lt;p&gt;이것저것 붙잡고 한참 씨름한 덕분에 &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;super&lt;/code&gt;에 대한 이해도와 &lt;code class=&quot;language-text&quot;&gt;@nestjs/config&lt;/code&gt;사용, 환경변수 적용이 익숙해졌다.
뜯어보면 별거 아니지만 누군가는 나와 같은 문제를 겪을 수도 있을 것 같아 문제 해결하고 잊어버리기 전에 급하게 적었다.
테스트도 결국 비용이고 대부분의 테스트코드가 &lt;code class=&quot;language-text&quot;&gt;mocking&lt;/code&gt;으로 적히는 걸로 보아 그게 효율적인 방법일 것 같아서 어느정도 DB에 직접 연결해서 테스트를 하다가 규모가 커지면 &lt;code class=&quot;language-text&quot;&gt;mocking&lt;/code&gt;해서 테스트 하는 방법으로 전환해야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World!]]></title><description><![CDATA[Gatsby? 22년 새해를 맞아 만들었던 Jekyll블로그를 버리고 Gatsby…]]></description><link>https://grasshopper42.github.io/init/</link><guid isPermaLink="false">https://grasshopper42.github.io/init/</guid><pubDate>Fri, 03 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Gatsby?&lt;/h2&gt;
&lt;p&gt;22년 새해를 맞아 만들었던 Jekyll블로그를 버리고 Gatsby로 블로그를 옮겼다. 공부한 것들을 글로 남기자 다짐했지만 글로 정리한다는건 귀찮은 일이고 더군다나 익숙치도 않은 마크다운문법을 쓰려니 손에 잡히지가 않았다. 귀찮은 일이었지만 Gatsby로 옮긴건 그나마 React가 익숙한 까닭이다. 지금 서비스에 사용중인 NextJS를 쓸까도 생각해봤지만 직접 디자인하고 구현하려니 시간이 부족하고 template도 부족해 급한대로 Gatsby로 옮겼다.&lt;/p&gt;
&lt;h2&gt;다시 블로그를 잡은건&lt;/h2&gt;
&lt;p&gt;멀쩡한 Jekyll 블로그는 지금까지 쓰지도 않다가 굳이 Gatsby로 옮겨가며 글을 쓰는것은 슬슬 정리해두지 않고는 기억할 자신이 없어졌기 때문이다. unhide 서비스를 개발하며 혼자 풀스택으로 여러 프레임워크와 라이브러리를 급하게 공부해가며 쓰다보니 점점 헷갈리기 시작한다. 지금까지 써왔던 GraphQL을 버리고 NestJS로 옮겨가는 과정에서 내가 계속 들어다 볼 요량도 있지만 팀에 합류할 개발자를 위해서도 정리를 좀 해두려한다. NestJS 뿐만 아니라 언어나 다른 프레임워크 관련해서도 간단하게나마 조금씩 써둬야겠다.&lt;/p&gt;</content:encoded></item></channel></rss>